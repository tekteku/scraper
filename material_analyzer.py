"""
Outil d'analyse et de visualisation des donn√©es de mat√©riaux de construction
G√©n√®re des rapports complets pour l'estimation de co√ªts
"""

import json
import pandas as pd
from datetime import datetime
import os

class MaterialAnalyzer:
    def __init__(self, data_folder="materials_data"):
        self.data_folder = data_folder
        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
    def load_latest_data(self):
        """Charge les derni√®res donn√©es disponibles"""
        raw_folder = os.path.join(self.data_folder, "raw")
        clean_folder = os.path.join(self.data_folder, "clean")
        
        # Trouve le fichier le plus r√©cent
        csv_files = [f for f in os.listdir(raw_folder) if f.startswith("construction_materials") and f.endswith(".csv")]
        if not csv_files:
            print("Aucun fichier de donn√©es trouv√©")
            return None
        
        latest_file = sorted(csv_files)[-1]
        csv_path = os.path.join(raw_folder, latest_file)
        
        self.df = pd.read_csv(csv_path)
        print(f"Donn√©es charg√©es: {len(self.df)} mat√©riaux depuis {latest_file}")
        
        # Charge aussi les estimations
        estimates_files = [f for f in os.listdir(clean_folder) if f.startswith("project_estimates") and f.endswith(".json")]
        if estimates_files:
            latest_estimates = sorted(estimates_files)[-1]
            estimates_path = os.path.join(clean_folder, latest_estimates)
            with open(estimates_path, 'r', encoding='utf-8') as f:
                self.estimates = json.load(f)
        
        return self.df
    
    def generate_price_report(self):
        """G√©n√®re un rapport d√©taill√© des prix"""
        print("\n" + "="*80)
        print("RAPPORT D√âTAILL√â DES PRIX DES MAT√âRIAUX DE CONSTRUCTION")
        print("="*80)
        
        # Statistiques g√©n√©rales
        print(f"\nüìä STATISTIQUES G√âN√âRALES")
        print(f"   Total mat√©riaux analys√©s: {len(self.df)}")
        print(f"   Fourchette de prix: {self.df['prix'].min():.2f} - {self.df['prix'].max():.2f} TND")
        print(f"   Prix moyen: {self.df['prix'].mean():.2f} TND")
        
        # Analyse par cat√©gorie
        print(f"\nüèóÔ∏è ANALYSE PAR CAT√âGORIE")
        print("-" * 60)
        
        for category in self.df['categorie'].unique():
            cat_data = self.df[self.df['categorie'] == category]
            print(f"\n{category.upper().replace('_', ' ')}")
            print(f"   Nombre de produits: {len(cat_data)}")
            print(f"   Prix moyen: {cat_data['prix'].mean():.2f} TND")
            print(f"   Fourchette: {cat_data['prix'].min():.2f} - {cat_data['prix'].max():.2f} TND")
            
            # Top 3 des produits les plus chers de cette cat√©gorie
            top_products = cat_data.nlargest(3, 'prix')
            print(f"   Produits les plus chers:")
            for idx, row in top_products.iterrows():
                print(f"     ‚Ä¢ {row['nom']}: {row['prix']} TND/{row['unite']}")
        
        # Analyse des fournisseurs
        print(f"\nüè™ ANALYSE PAR FOURNISSEUR")
        print("-" * 60)
        
        for supplier in self.df['fournisseur'].unique():
            sup_data = self.df[self.df['fournisseur'] == supplier]
            print(f"\n{supplier}")
            print(f"   Produits disponibles: {len(sup_data)}")
            print(f"   Prix moyen: {sup_data['prix'].mean():.2f} TND")
            
            # Disponibilit√©
            availability = sup_data['disponibilite'].value_counts()
            print(f"   Disponibilit√©: {dict(availability)}")
    
    def generate_project_estimates(self):
        """Affiche les estimations de projets"""
        if not hasattr(self, 'estimates'):
            print("Aucune estimation de projet disponible")
            return
        
        print(f"\nüí∞ ESTIMATIONS DE CO√õTS POUR PROJETS TYPES")
        print("="*80)
        
        for project_name, project_data in self.estimates.items():
            print(f"\nüè† {project_data['description'].upper()}")
            print(f"   Co√ªt total estim√©: {project_data['cout_total_tnd']:,.2f} TND")
            print(f"   D√©tail des mat√©riaux:")
            
            for material, details in project_data['detail_materiaux'].items():
                print(f"     ‚Ä¢ {material}:")
                print(f"       - Prix unitaire: {details['prix_unitaire']} TND/{details['unite']}")
                print(f"       - Quantit√©: {details['quantite']} {details['unite']}")
                print(f"       - Co√ªt total: {details['cout_total']:,.2f} TND")
    
    def generate_comparison_table(self):
        """G√©n√®re un tableau de comparaison des prix"""
        print(f"\nüìã TABLEAU COMPARATIF DES PRIX PRINCIPAUX")
        print("="*80)
        
        # Groupe par nom de base (sans le d√©tail technique)
        material_groups = {}
        for idx, row in self.df.iterrows():
            base_name = row['nom'].split(' - ')[0]
            if base_name not in material_groups:
                material_groups[base_name] = []
            material_groups[base_name].append(row)
        
        for material_name, products in material_groups.items():
            if len(products) > 1:  # Seulement si plusieurs fournisseurs
                print(f"\n{material_name.upper()}")
                print("-" * 50)
                
                for product in products:
                    availability_icon = "‚úÖ" if product['disponibilite'] == "En stock" else "‚ö†Ô∏è" if product['disponibilite'] == "Stock limit√©" else "üìã"
                    print(f"   {availability_icon} {product['fournisseur']}: {product['prix']} TND/{product['unite']}")
                
                # Prix moyen et recommandation
                prices = [p['prix'] for p in products]
                avg_price = sum(prices) / len(prices)
                min_price = min(prices)
                best_supplier = next(p['fournisseur'] for p in products if p['prix'] == min_price)
                
                print(f"   üí° Prix moyen: {avg_price:.2f} TND")
                print(f"   üèÜ Meilleur prix: {best_supplier} ({min_price} TND)")
    
    def save_detailed_report(self):
        """Sauvegarde un rapport d√©taill√© en fichier"""
        report_file = f"materials_report_{self.timestamp}.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("RAPPORT COMPLET - MAT√âRIAUX DE CONSTRUCTION TUNISIE\n")
            f.write("="*60 + "\n")
            f.write(f"G√©n√©r√© le: {datetime.now().strftime('%d/%m/%Y √† %H:%M')}\n\n")
            
            # Recommandations pour √©conomiser
            f.write("üí° CONSEILS POUR √âCONOMISER:\n")
            f.write("-" * 40 + "\n")
            f.write("1. Comparer les prix entre fournisseurs (jusqu'√† 20% d'√©cart)\n")
            f.write("2. Acheter en gros pour n√©gocier des remises\n")
            f.write("3. Planifier les achats selon la disponibilit√©\n")
            f.write("4. V√©rifier la qualit√© avant de choisir le moins cher\n\n")
            
            # Donn√©es d√©taill√©es
            f.write("DONN√âES D√âTAILL√âES:\n")
            f.write("-" * 40 + "\n")
            for idx, row in self.df.iterrows():
                f.write(f"‚Ä¢ {row['nom']}\n")
                f.write(f"  Prix: {row['prix']} {row['devise']}/{row['unite']}\n")
                f.write(f"  Fournisseur: {row['fournisseur']}\n")
                f.write(f"  Disponibilit√©: {row['disponibilite']}\n")
                f.write(f"  Usage: {row['usage']}\n\n")
        
        print(f"\nüìÑ Rapport d√©taill√© sauvegard√©: {report_file}")
    
    def run_complete_analysis(self):
        """Ex√©cute l'analyse compl√®te"""
        if self.load_latest_data() is None:
            return
        
        self.generate_price_report()
        self.generate_project_estimates()
        self.generate_comparison_table()
        self.save_detailed_report()
        
        print(f"\n‚úÖ Analyse termin√©e !")
        print(f"   - {len(self.df)} mat√©riaux analys√©s")
        print(f"   - Rapport sauvegard√©")
        print(f"   - Estimations de projets disponibles")

def main():
    analyzer = MaterialAnalyzer()
    analyzer.run_complete_analysis()

if __name__ == "__main__":
    main()
