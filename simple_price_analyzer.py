#!/usr/bin/env python3
"""
Comparateur de Prix Simplifi√© pour les Donn√©es d'Estimation
"""

import pandas as pd
import numpy as np
from datetime import datetime

def analyze_price_data():
    """Analyser les donn√©es de prix existantes"""
    
    # Charger les donn√©es
    try:
        df = pd.read_csv('ESTIMATION_MATERIAUX_TUNISIE_20250611.csv')
        print(f"‚úÖ Donn√©es charg√©es: {len(df)} mat√©riaux")
    except Exception as e:
        print(f"‚ùå Erreur chargement: {e}")
        return
    
    # Analyse des √©conomies par fournisseur
    print("\nüè™ ANALYSE PAR FOURNISSEUR:")
    print("=" * 40)
    
    fournisseur_stats = df.groupby('Meilleur_Fournisseur').agg({
        'Prix_Unitaire_TND': 'mean',
        '√âconomie_TND': ['sum', 'mean'],
        'Mat√©riau': 'count'
    }).round(2)
    
    fournisseur_stats.columns = ['Prix_Moyen', '√âconomies_Totales', '√âconomies_Moyennes', 'Nb_Produits']
    print(fournisseur_stats)
    
    # Top √©conomies
    print("\nüí∞ TOP 5 √âCONOMIES POSSIBLES:")
    print("-" * 30)
    
    top_savings = df.nlargest(5, '√âconomie_TND')[['Mat√©riau', '√âconomie_TND', '√âconomie_Pourcentage', 'Meilleur_Fournisseur']]
    for _, row in top_savings.iterrows():
        print(f"‚Ä¢ {row['Mat√©riau']}: {row['√âconomie_TND']:.2f} TND ({row['√âconomie_Pourcentage']:.1f}%) - {row['Meilleur_Fournisseur']}")
    
    # Analyse par cat√©gorie
    print("\nüìä ANALYSE PAR CAT√âGORIE:")
    print("-" * 25)
    
    cat_stats = df.groupby('Cat√©gorie').agg({
        'Prix_Unitaire_TND': ['mean', 'min', 'max'],
        '√âconomie_TND': 'sum',
        'Mat√©riau': 'count'
    }).round(2)
    
    for cat in df['Cat√©gorie'].unique():
        cat_data = df[df['Cat√©gorie'] == cat]
        print(f"\nüîß {cat.upper()}:")
        print(f"   - Nb produits: {len(cat_data)}")
        print(f"   - Prix moyen: {cat_data['Prix_Unitaire_TND'].mean():.2f} TND")
        print(f"   - √âconomies totales: {cat_data['√âconomie_TND'].sum():.2f} TND")
        print(f"   - Meilleur fournisseur: {cat_data.loc[cat_data['√âconomie_TND'].idxmax(), 'Meilleur_Fournisseur']}")
    
    # G√©n√©ration de rapport de comparaison
    generate_comparison_report(df)

def generate_comparison_report(df):
    """G√©n√©rer un rapport de comparaison d√©taill√©"""
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    report_file = f'rapport_comparaison_{timestamp}.txt'
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("üìä RAPPORT DE COMPARAISON PRIX MAT√âRIAUX\n")
        f.write("=" * 45 + "\n\n")
        f.write(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Mat√©riaux analys√©s: {len(df)}\n\n")
        
        # Statistiques globales
        total_savings = df['√âconomie_TND'].sum()
        avg_savings_pct = df['√âconomie_Pourcentage'].mean()
        
        f.write("üí∞ R√âSUM√â √âCONOMIES:\n")
        f.write(f"   - √âconomies totales possibles: {total_savings:.2f} TND\n")
        f.write(f"   - √âconomie moyenne: {avg_savings_pct:.1f}%\n")
        f.write(f"   - Mat√©riau le plus √©conomique: {df.loc[df['√âconomie_TND'].idxmax(), 'Mat√©riau']}\n\n")
        
        # D√©tail par mat√©riau
        f.write("üîç D√âTAIL PAR MAT√âRIAU:\n")
        f.write("-" * 25 + "\n")
        
        for _, row in df.iterrows():
            f.write(f"\n‚Ä¢ {row['Mat√©riau']}:\n")
            f.write(f"  üìç Meilleur prix: {row['Prix_Unitaire_TND']:.2f} TND/{row['Unit√©']} ({row['Meilleur_Fournisseur']})\n")
            f.write(f"  üìà Prix moyen march√©: {row['Prix_Moyen_TND']:.2f} TND\n")
            f.write(f"  üìâ Prix maximum: {row['Prix_Max_TND']:.2f} TND\n")
            f.write(f"  üí∞ √âconomie possible: {row['√âconomie_TND']:.2f} TND ({row['√âconomie_Pourcentage']:.1f}%)\n")
            f.write(f"  üè™ Nb fournisseurs: {row['Nombre_Fournisseurs']}\n")
            f.write(f"  üì¶ Disponibilit√©: {row['Disponibilit√©']}\n")
        
        # Recommandations
        f.write("\n\nüéØ RECOMMANDATIONS:\n")
        f.write("-" * 15 + "\n")
        
        # Meilleur fournisseur global
        best_supplier = df.groupby('Meilleur_Fournisseur')['√âconomie_TND'].sum().idxmax()
        best_supplier_savings = df.groupby('Meilleur_Fournisseur')['√âconomie_TND'].sum().max()
        
        f.write(f"1. üèÜ Fournisseur recommand√©: {best_supplier}\n")
        f.write(f"   - √âconomies g√©n√©r√©es: {best_supplier_savings:.2f} TND\n")
        f.write(f"   - Produits propos√©s: {len(df[df['Meilleur_Fournisseur'] == best_supplier])}\n\n")
        
        f.write("2. üìà Mat√©riaux prioritaires (plus fortes √©conomies):\n")
        top_3 = df.nlargest(3, '√âconomie_TND')
        for i, (_, row) in enumerate(top_3.iterrows(), 1):
            f.write(f"   {i}. {row['Mat√©riau']}: {row['√âconomie_TND']:.2f} TND d'√©conomie\n")
        
        f.write("\n3. ‚ö†Ô∏è Points d'attention:\n")
        stock_limite = df[df['Disponibilit√©'] == 'Stock limit√©']
        if not stock_limite.empty:
            f.write(f"   - {len(stock_limite)} mat√©riaux en stock limit√©\n")
        
        sur_commande = df[df['Disponibilit√©'] == 'Sur commande']
        if not sur_commande.empty:
            f.write(f"   - {len(sur_commande)} mat√©riaux sur commande\n")
    
    print(f"\nüìÑ Rapport d√©taill√© g√©n√©r√©: {report_file}")
    
    # Exporter aussi en CSV pour analyse
    csv_file = f'comparaison_detaillee_{timestamp}.csv'
    
    # Ajouter colonnes d'analyse
    df_export = df.copy()
    df_export['Ratio_Economie'] = df_export['√âconomie_TND'] / df_export['Prix_Unitaire_TND']
    df_export['Rang_Economie'] = df_export['√âconomie_TND'].rank(ascending=False)
    df_export['Categoria_Prix'] = pd.cut(df_export['Prix_Unitaire_TND'], 
                                        bins=3, 
                                        labels=['√âconomique', 'Moyen', 'Cher'])
    
    df_export.to_csv(csv_file, index=False, encoding='utf-8')
    print(f"üìä Donn√©es d'analyse export√©es: {csv_file}")

if __name__ == "__main__":
    analyze_price_data()
